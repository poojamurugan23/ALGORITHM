# -*- coding: utf-8 -*-
"""Experiment : 5 - (Aprroximation_and_Randomized_Algorithm).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JGW3paN5MIbb6khm8onmVJc2_18jnGkv
"""

import numpy as np
import time
def tsp_dp(graph, n):
    dp = np.ones((1 << n, n)) * np.inf
    dp[1][0] = 0  # Starting point
    for mask in range(1, 1 << n):
        for i in range(n):
            if not (mask & (1 << i)):
                continue
            for j in range(n):
                if i == j or not (mask & (1 << j)):
                    continue
                dp[mask][i] = min(dp[mask][i], dp[mask ^ (1 << i)][j] + graph[j][i])
    return min([dp[(1 << n) - 1][i] + graph[i][0] for i in range(n)])
def tsp_nn(graph, n):
    visited = [0] * n
    visited[0] = 1
    curr = 0
    ans = 0
    for i in range(n - 1):
        next = -1
        for j in range(n):
            if visited[j] == 0 and (next == -1 or graph[curr][j] < graph[curr][next]):
                next = j
        ans += graph[curr][next]
        curr = next
        visited[curr] = 1
    ans += graph[curr][0]
    return ans
def tsp_error(graph, n):
    opt = tsp_dp(graph, n)
    approx = tsp_nn(graph, n)
    return (approx - opt) / opt * 100
def time_taken(graph, n):
    start = time.time()
    tsp_dp(graph, n)
    end = time.time()
    return end - start
n = 4
graph = np.array([[0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0]])
print("Optimal Solution:", tsp_dp(graph, n))
print("Approximation:", tsp_nn(graph, n))
print("Error:", tsp_error(graph, n), "%")
print("Time taken:", time_taken(graph, n), "seconds")

import random
import time
def quick_select(arr, k):
    pivot = random.choice(arr)
    left = [x for x in arr if x < pivot]
    right = [x for x in arr if x > pivot]
    if k <= len(left):
        return quick_select(left, k)
    elif k == len(left) + 1:
        return pivot
    else:
        return quick_select(right, k - (len(left) + 1))
def reservoir_sampling(arr, k):
    reservoir = arr[:k]
    for i in range(k, len(arr)):
        j = random.randint(0, i)
        if j < k:
            reservoir[j] = arr[i]
    return reservoir
def time_taken(func, arr, k):
    print("Time of my program")
    start = time.time()
    func(arr, k)
    end = time.time()
    return end - start
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
k = 5
print("QuickSelect:", quick_select(arr, k))
print("Reservoir Sampling:", reservoir_sampling(arr, k))
quickselect_time = time_taken(quick_select, arr, k)
print("QuickSelect Time:", quickselect_time)
reservoir_time = time_taken(reservoir_sampling, arr, k)
print("Reservoir Sampling Time:", reservoir_time)