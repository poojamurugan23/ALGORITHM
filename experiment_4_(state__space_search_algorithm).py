# -*- coding: utf-8 -*-
"""Experiment : 4 - (State_ space_search_Algorithm).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JFfpeXyb9-zxFuwXWEvtmg6bGSy15jJn
"""

import time
def print_board(board):
    for i in range(len(board)):
        for j in range(len(board)):
            if board[i][j] == 1:
                print("Q ", end="")
            else:
                print("- ", end="")
        print()
def is_safe(board, row, col):
    for i in range(col):
        if board[row][i] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, len(board), 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    return True
def solve_n_queens(board, col):
    if col >= len(board):
        return True
    for i in range(len(board)):
        if is_safe(board, i, col):
            board[i][col] = 1
            if solve_n_queens(board, col + 1):
                return True
            board[i][col] = 0
    return False
def n_queens(n):
    board = [[0 for i in range(n)] for j in range(n)]
    start_time = time.time()
    if solve_n_queens(board, 0):
        print_board(board)
    else:
        print("Solution does not exist")
    end_time = time.time()
    print("Time taken: ", end_time - start_time)
n = 8
n_queens(n)