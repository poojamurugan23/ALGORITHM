# -*- coding: utf-8 -*-
"""2. Binary Search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1urU5YDs2vgFaqYj7tAO7VlnUDEeKyMe7
"""

import time
import random
import matplotlib.pyplot as plt

def binary_search(arr, target, left, right):
    if left > right:
        return -1
    mid = (left + right) // 2
    if arr[mid] == target:
        return mid
    elif arr[mid] < target:
        return binary_search(arr, target, mid + 1, right)
    else:
        return binary_search(arr, target, left, mid - 1)


sizes = [100, 500, 1000, 5000, 10000, 50000]
times = []

for n in sizes:
    arr = sorted(random.randint(0, n) for _ in range(n))
    target = random.choice(arr)

    start_time = time.time()
    binary_search(arr, target, 0, len(arr) - 1)
    end_time = time.time()

    times.append(end_time - start_time)


plt.plot(sizes, times, marker='o', linestyle='-', color='r')
plt.xlabel('Number of elements (n)')
plt.ylabel('Time taken (seconds)')
plt.title('Recursive Binary Search Time Complexity')
plt.grid()
plt.show()