# -*- coding: utf-8 -*-
"""4-Seven Sorting Algorithms.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nuVECNMNIV5l_CJu8xALiiAxSPn81h5u
"""

def BUBBLE_SORT(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

arr = [102, 645, 225, 192, 522, 11, 9740]
BUBBLE_SORT(arr)
print("Sorted array:", arr)

def SELECTION_SORT(arr):
    n = len(arr)
    for i in range(n):
        min_idx = i
        for j in range(i + 1, n):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]


arr = [86, 45, 259, 182, 222, 1471, 190]
SELECTION_SORT(arr)
print("Sorted array:", arr)

def INSERTION_SORT(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

arr = [66, 58, 254, 152, 422, 996, 980]
INSERTION_SORT(arr)
print("Sorted array:", arr)

def MERGE_SORT(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]
        merge_sort(left_half)
        merge_sort(right_half)
        i = j = k = 0
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1
        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1


arr = [816, 457, 259, 182, 222, 1471, 190]
MERGE_SORT(arr)
print("Sorted array:", arr)

def QUICK_SORT(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)


arr = [484, 234, 925, 612, 202, 101, 490]
sorted_arr = QUICK_SORT(arr)
print("Sorted array:", sorted_arr)

import heapq

def HEAP_SORT(arr):
    heapq.heapify(arr)
    return [heapq.heappop(arr) for _ in range(len(arr))]


arr =[102, 645, 225, 192, 522, 101, 9740]
sorted_arr = HEAP_SORT(arr)
print("Sorted array:", sorted_arr)

def COUNTING_SORT(arr):
    max_val = max(arr)
    count = [0] * (max_val + 1)
    for num in arr:
        count[num] += 1
    sorted_arr = []
    for i, freq in enumerate(count):
        sorted_arr.extend([i] * freq)
    return sorted_arr

# Example usage
arr = [66, 58, 254, 152, 422, 996, 980]
sorted_arr = COUNTING_SORT(arr)
print("Sorted array:", sorted_arr)

